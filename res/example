Family X {
  type R = {n: N}

  val p: R -> String = lam (x: R). s"bool given is ${x.n != 0}"

  Family C {
    type T = T1 {n: N}
    // type U = T1 {...} disallow ctors with same names

    val f: B -> T = lam (x: B). T(T1 {n = 10}) // TODO: no typename for ctor, instead path.T1 {...}

    cases someCases <T>: {} -> { T1: {n: N} -> T } = lam (_: {}).
      { T1 = lam (x: {n: N}). T(T1 {n = 5 + x.n * x.n})
      }
  }
  Family D extends self(X).C {
    type T += T2 {b: B}

    val f: B -> T = lam (x: B). T(T2 {b = true})
    val g: T -> N = lam (t: T). 10

    cases someCases <T>: {} -> { T2: {b: B} -> T } += lam (_: {}).
      { T2 = lam (y: {b: B}). T(T1 {n = 42})
      }

  }
}

Family Y extends X {
  type R += {b: B = true}

  val someR: {} -> R = lam (_: {}). R ({n = 0, b = false})
  val p: R -> String = lam (x: R). s"NOW... bool given is ${x.b}"

  Family C {
    type T += T3 {t: T} | T4 {t1: T, t2: T}

    val f: B -> T = lam (n: B). T(T3 {t = T(T1 {n = 3})})

    val g: T -> N = lam (t: T). 0

    val h: X.D.T -> N = X.D.g    // "Specialization" should typecheck

    val rec: {} -> {n: N, b: B} = lam (_: {}). {n = 1, b = true, c = 3}

    val doSomeCases: T -> T = lam (t: T). match t with <someCases> {}

    cases someCases <T>: {} -> { T3: {t: T} -> T, T4: {t1: T, t2: T} -> T } += lam (_: {}).
      { T4 = lam (x: {t1: T, t2: T}). match x.t1 with <someCases> {}
      , T3 = lam (x: {t: T}). match x.t with <someCases> {}
      }
  }
}

Family Main {
  val main1: {} -> Y.D.T = lam (_: {}).
    Y.D.doSomeCases Y.D.T(T1 {n = 10 * (Y.D.g (Y.D.f true))})

  val main3: {} -> Y.D.T = lam(_: {}).
    Y.D.doSomeCases (Y.D.T(T4 {t1 = Y.D.T(T3 { t = Y.D.T(T1 {n = 10}) }), t2 = Y.D.T(T2 { b = true })}))

  val main2: {} -> Y.D.T = lam (_: {}).
    Y.D.doSomeCases Y.D.T(T2 {b = true})

  val main4: {} -> String = lam (_: {}).
    X.p (X.R ({ n = 0 }))

  val main5: {} -> String = lam (_: {}).
    Y.p (Y.R ({ n = 0 }))

  val main6: {} -> String = lam (_: {}).
    Y.p (Y.someR {})

  val fact: N -> N = lam (n: N).
    if !(n > 0)
    then 1
    else n * fact (n - 1)
}