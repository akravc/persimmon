Family Peano {
    type Nat = O {} | S {n: Nat}

    def isZero: Nat -> B =
        case O() = true
        case S(n: Nat) = false

    def eqNat(n2: Nat): Nat -> B =
        case O() = isZero(n2)
        case S(n: Nat) = eqNatRec(n, n2)

    def eqNatRec(n1: Nat): Nat -> B = 
        case O() = false
        case S(n: Nat) = eqNat(n1, n)
}