Family Base {
    type Exp = Num {v: N}

    def eval: Exp -> N =
        case Num(v: N) = v
}

Mixin BasePlus extends Base {
    type Exp += Plus {l: Exp,r: Exp}

    def eval: Exp -> N +=
        case Plus(l: Exp,r: Exp) = (eval l) + (eval r)
}

Mixin BaseNeg extends Base {
    type Exp += Neg {t: Exp}

    def eval: Exp -> N +=
        case Neg(t: Exp) = - (eval t)
}

Family BasePlusNeg extends Base with BasePlus, BaseNeg {}

Mixin ShowPlusNeg extends BasePlusNeg {
    val toString: N -> Str = lam(n: N). "TODO"
    def show: Exp -> Str =
        case Num(v: N) = "" + (toString v)
        case Plus(l: Exp,r: Exp) = (show l) + "+" + (show r)
        case Neg(t: Exp) = "-(" + (show t) + ")"
}

Mixin DblePlusNeg extends BasePlusNeg {
    def dble: Exp -> Exp =
        case Num(v: N) = Exp(Num{v = v * v})
        case Plus(l: Exp, r: Exp) = Exp(Plus{l = dble(l), r = dble(r)})
        case Neg(t: Exp) = Exp(Neg{t = dble(t)})
}

Family ShowDblePlusNeg extends BasePlusNeg with ShowPlusNeg, DblePlusNeg {}