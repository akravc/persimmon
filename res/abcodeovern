Family A1 {
  Family B1 {
    type Exp = EBase {}
    val f: N -> N = lam (n: N). n
    val eval: Exp -> N = lam (e: Exp). match e with <eval_cases> {}
    cases eval_cases <Exp> : {} -> {EBase: {} -> N} =
      lam (unit: {}). {EBase = lam (unit: {}). 0}
  }
  Family B2 extends self(A1).B1 {
    type Exp += ENat {n: N}
    val f: N -> N = lam (n: N). n+1
    cases eval_cases <Exp> : {} -> {ENat: {n: N} -> N} +=
        lam (unit: {}). {ENat = lam (x: {n: N}). x.n}
  }
}
Family A2 extends A1 {
  Family B1 {
    type Exp += EBase2 {}
    val f: N -> N = lam (n: N). n+2
    cases eval_cases <Exp> : {} -> {EBase2: {} -> N} +=
      lam (unit: {}). {EBase2 = lam (unit: {}). 1}
  }
  Family B2 extends self(A2).B1 {
    type X = {x: B}
    type Exp += ENat2 {n: N}
    cases eval_cases <Exp> : {} -> {ENat2: {n: N} -> N} +=
        lam (unit: {}). {ENat2 = lam (x: {n: N}). (x.n + 2)}
  }
}
