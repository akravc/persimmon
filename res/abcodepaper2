Family A1 {
  Family B1 {
    type Exp = ENat {n : N}
    val f: N -> N = lam (n: N). n
    val ev: Exp -> N = lam (e: Exp). match e with <evc> {}
    cases evc <Exp> : {} -> {ENat: {n: N} -> N} =
      lam (unit: {}). {ENat = lam (x: {n: N}). x.n}
  }
  Family B2 extends self(A1).B1 {
    val f: N -> N = lam (n: N). n+1
  }
}
Family A2 extends A1 {
  Family B1 {
    val f: N -> N = lam (n: N). n+2
  }
  Family B2 extends self(A2).B1 {
    type X = {x: B}
    type Exp += EPlus {e1: Exp, e2: Exp}
    cases evc <Exp> : {} -> {EPlus: {e1: Exp, e2: Exp} -> N} +=
      lam (unit: {}). {EPlus = lam (x: {e1: Exp, e2: Exp}).
        (ev(x.e1) + ev(x.e2))
    }
  }
}
Family ABMain {
  val main1: {} -> N = lam (ignore: {}). A2.B2.ev (A2.B2.Exp(ENat {n = 3}))
  val main2: {} -> N = lam (ignore: {}). A2.B2.f (3)
}

